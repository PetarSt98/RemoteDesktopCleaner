//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ch.cern.network
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:NetworkService", ConfigurationName="ch.cern.network.NetworkServiceInterface")]
    public interface NetworkServiceInterface
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="token")]
        System.Threading.Tasks.Task<string> getAuthTokenAsync(string Login, string Password, string Type);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="DeviceList")]
        System.Threading.Tasks.Task<string[]> searchDeviceAsync(ch.cern.network.DeviceSearch DeviceSearch);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Device")]
        System.Threading.Tasks.Task<ch.cern.network.DeviceBasicInfo> getDeviceBasicInfoAsync(string DeviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Device")]
        System.Threading.Tasks.Task<ch.cern.network.DeviceInfo> getDeviceInfoAsync(string DeviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="DeviceInfoList")]
        System.Threading.Tasks.Task<ch.cern.network.DeviceInfo[]> getDeviceInfoArrayAsync(string[] DeviceNameList);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Device")]
        System.Threading.Tasks.Task<ch.cern.network.DeviceInfo> getDeviceInfoFromNameMACAsync(string DeviceName, string MAC);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Device")]
        System.Threading.Tasks.Task<ch.cern.network.DeviceInfo> getMyDeviceInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="DeviceList")]
        System.Threading.Tasks.Task<string[]> getLastChangedDevicesAsync(int Minutes);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> bulkInsertAsync(ch.cern.network.DeviceInput Device, ch.cern.network.InterfaceCard[] Cards, ch.cern.network.BulkInterface[] Interfaces);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> bulkInsertAutoAsync(ch.cern.network.DeviceInput Device, ch.cern.network.InterfaceCard[] Cards, ch.cern.network.BulkInterfaceAuto[] Interfaces);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> bulkRemoveAsync(string DeviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> deviceInsertAsync(ch.cern.network.DeviceInput Device);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> deviceAddCardAsync(string DeviceName, ch.cern.network.InterfaceCard InterfaceCard);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> deviceAddBulkInterfaceAsync(string DeviceName, ch.cern.network.BulkInterface BulkInterface);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> deviceRemoveAsync(string DeviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> deviceRemoveCardAsync(string DeviceName, string HardwareAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> deviceRemoveBulkInterfaceAsync(string DeviceName, string InterfaceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> deviceMoveBulkInterfaceAsync(string DeviceName, string InterfaceName, ch.cern.network.BulkInterface BulkInterface, ch.cern.network.BulkMoveOptions BulkMoveOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> deviceUpdateAsync(string DeviceName, ch.cern.network.DeviceInput DeviceInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> deviceGlobalRenameAsync(string DeviceName, string NewDeviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> setHCPResponseAsync(string[] DeviceList, bool HCPFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> deviceUpdateIPv6ReadyAsync(string DeviceName, bool IPv6Ready);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> deviceUpdateManagerLockAsync(string DeviceName, bool ManagerLocked);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> deviceSetBOOTPInfoAsync(string Device, string Server, string ImagePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> deviceRemoveBOOTPInfoAsync(string Device);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="BOOTPInfo")]
        System.Threading.Tasks.Task<ch.cern.network.BOOTPInfo> getBOOTPInfoAsync(string Device);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="BulkInterface")]
        System.Threading.Tasks.Task<ch.cern.network.BulkInterface> getBulkInterfaceInfoAsync(string InterfaceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> setInsertAddressAsync(string Set, string Address);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> setInsertServiceAsync(string Set, string Service);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> setDeleteAddressAsync(string Set, string Address);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> setDeleteServiceAsync(string Set, string Service);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="SetInfo")]
        System.Threading.Tasks.Task<ch.cern.network.SetInfo> getSetInfoAsync(string SetName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="SetName")]
        System.Threading.Tasks.Task<string> getSetNameFromIDAsync(long SetID);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Interfaces")]
        System.Threading.Tasks.Task<string[]> getSetAllInterfacesAsync(string SetName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Interfaces")]
        System.Threading.Tasks.Task<string[]> getSetInterfacesTrustingAsync(string SetName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="HostsInfo")]
        System.Threading.Tasks.Task<ch.cern.network.InetInfo[]> getHCPInfoArrayAsync(string[] Hosts);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Hosts")]
        System.Threading.Tasks.Task<string[]> getDevicesFromServiceAsync(string Service);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Hosts")]
        System.Threading.Tasks.Task<string[]> getSwitchesFromServiceAsync(string Service);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="SwitchInfo")]
        System.Threading.Tasks.Task<ch.cern.network.SwitchPort[]> getSwitchInfoAsync(string SwitchName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ConnectionInfo")]
        System.Threading.Tasks.Task<ch.cern.network.Connection[]> getConnectionsFromDeviceAsync(string DeviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="OutletLocation")]
        System.Threading.Tasks.Task<ch.cern.network.OutletLocation> getOutletLocationFromSwitchPortAsync(string SwitchName, string PortName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ObservedConnections")]
        System.Threading.Tasks.Task<ch.cern.network.ObservedSwitchConnection[]> getCurrentConnectionAsync(string ip, string[] HardwareAddressList);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ObservedConnections")]
        System.Threading.Tasks.Task<ch.cern.network.ObservedSwitchConnection[]> getMyCurrentConnectionAsync(string[] HardwareAddressList);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> enableFanOutFromSwitchPortAsync(string SwitchName, string PortName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> bindUnbindInterfaceAsync(string InterfaceName, string HardwareAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> interfaceAddAliasAsync(string InterfaceName, string Alias);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> interfaceRemoveAliasAsync(string InterfaceName, string Alias);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> interfaceMoveAliasAsync(string InterfaceName, string Alias, string NewInterfaceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> interfaceRenameAsync(string InterfaceName, string NewInterfaceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> interfaceMoveAsync(string InterfaceName, string NewDeviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Sets")]
        System.Threading.Tasks.Task<string[]> searchSetAsync(string SetPattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> setInsertAsync(ch.cern.network.SetInput Set);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> setRemoveAsync(string SetName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> setSwitchPortTypeStatusAsync(string SwitchName, string PortName, ch.cern.network.SwitchPortTypeStatus SwitchPortTypeStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> setSwitchPortMediumAsync(string SwitchName, string PortName, string PortMedium);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> setSwitchPortServiceAsync(string SwitchName, string PortName, string Service);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="SwitchPortTypeStatus")]
        System.Threading.Tasks.Task<ch.cern.network.SwitchPortTypeStatus> getSwitchPortTypeStatusAsync(string SwitchName, string PortName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="NetNameTable")]
        System.Threading.Tasks.Task<ch.cern.network.NetNameTuple[]> searchNetNameTableAsync(string NetName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> deviceAddLogicalInterfaceAsync(string DeviceName, ch.cern.network.LogicalInterfaceInput LogicalInterface);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> deviceRemoveLogicalInterfaceAsync(string DeviceName, string InterfaceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> interfaceUpdateDescriptionAsync(string InterfaceName, string Description);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> serviceUpdateDescriptionAsync(string ServiceName, string Description);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="ServiceInfo")]
        System.Threading.Tasks.Task<ch.cern.network.ServiceInfo> getServiceInfoAsync(string ServiceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> vmCreateAsync(ch.cern.network.DeviceInput VMDevice, ch.cern.network.VMCreateOptions VMCreateOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> vmMigrateAsync(string VMName, string NewParent);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> vmUpdateAsync(string DeviceName, ch.cern.network.DeviceInput DeviceInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> vmDestroyAsync(string VMName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="VMClusterInfo")]
        System.Threading.Tasks.Task<ch.cern.network.VMClusterInfo> vmClusterGetInfoAsync(string VMClusterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Hosts")]
        System.Threading.Tasks.Task<string[]> vmClusterGetDevicesAsync(string VMClusterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="VMInfo")]
        System.Threading.Tasks.Task<ch.cern.network.VMInfo> vmGetInfoAsync(string VMName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="VMClusterList")]
        System.Threading.Tasks.Task<string[]> vmGetClusterMembershipAsync(string DeviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="VMClusterList")]
        System.Threading.Tasks.Task<string[]> vmSearchClusterAsync(ch.cern.network.VMClusterSearch VMClusterSearch);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> vmAddInterfaceAsync(string VMName, string InterfaceName, string VMClusterName, ch.cern.network.VMInterfaceOptions VMInterfaceOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> vmRemoveInterfaceAsync(string VMName, string InterfaceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> vmMoveInterfaceAsync(string VMName, string InterfaceName, string VMClusterName, ch.cern.network.VMInterfaceOptions VMInterfaceOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="HardwareAddress")]
        System.Threading.Tasks.Task<string> vmAddCardAsync(string VMName, ch.cern.network.InterfaceCard InterfaceCard);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> vmRemoveCardAsync(string VMName, string HardwareAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> dnsZoneUpdateAsync(string Zone, ch.cern.network.DnsZoneOptions DnsZoneOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="DNSDelegatedEntries")]
        System.Threading.Tasks.Task<ch.cern.network.DNSDelegatedEntry[]> dnsDelegatedSearchAsync(string Search);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="DNSDelegatedEntry")]
        System.Threading.Tasks.Task<ch.cern.network.DNSDelegatedEntry> dnsDelegatedGetByNameViewAsync(string Domain, string View);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> dnsDelegatedAddAsync(ch.cern.network.DNSDelegatedInput DNSDelegatedInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="DNSDelegatedKeys")]
        System.Threading.Tasks.Task<ch.cern.network.DNSDelegatedKey[]> dnsDelegatedListKeysAsync(ch.cern.network.Auth Auth);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> dnsDelegatedRemoveAsync(string Domain, string View);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> dnsDelegatedAliasAddAsync(string Domain, string View, string Alias);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DNSDelegatedKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NetNameTuple))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ObservedSwitchConnection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Connection))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SwitchPort))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InetInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BulkInterfaceAuto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(InterfaceInformation))]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Result")]
        System.Threading.Tasks.Task<bool> dnsDelegatedAliasRemoveAsync(string Domain, string View, string Alias);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class Auth
    {
        
        private string tokenField;
        
        /// <remarks/>
        public string token
        {
            get
            {
                return this.tokenField;
            }
            set
            {
                this.tokenField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class DNSDelegatedKey
    {
        
        private System.Nullable<long> idField;
        
        private string keyNameField;
        
        private Person responsibleField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<long> ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string KeyName
        {
            get
            {
                return this.keyNameField;
            }
            set
            {
                this.keyNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Person Responsible
        {
            get
            {
                return this.responsibleField;
            }
            set
            {
                this.responsibleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class Person
    {
        
        private string nameField;
        
        private string firstNameField;
        
        private string departmentField;
        
        private string groupField;
        
        private string emailField;
        
        private string phoneField;
        
        private System.Nullable<long> cCIDField;
        
        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName
        {
            get
            {
                return this.firstNameField;
            }
            set
            {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Department
        {
            get
            {
                return this.departmentField;
            }
            set
            {
                this.departmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Group
        {
            get
            {
                return this.groupField;
            }
            set
            {
                this.groupField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Email
        {
            get
            {
                return this.emailField;
            }
            set
            {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Phone
        {
            get
            {
                return this.phoneField;
            }
            set
            {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<long> CCID
        {
            get
            {
                return this.cCIDField;
            }
            set
            {
                this.cCIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class DNSDelegatedInput
    {
        
        private string domainField;
        
        private string viewField;
        
        private string keyNameField;
        
        private string descriptionField;
        
        private string userDescriptionField;
        
        /// <remarks/>
        public string Domain
        {
            get
            {
                return this.domainField;
            }
            set
            {
                this.domainField = value;
            }
        }
        
        /// <remarks/>
        public string View
        {
            get
            {
                return this.viewField;
            }
            set
            {
                this.viewField = value;
            }
        }
        
        /// <remarks/>
        public string KeyName
        {
            get
            {
                return this.keyNameField;
            }
            set
            {
                this.keyNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string UserDescription
        {
            get
            {
                return this.userDescriptionField;
            }
            set
            {
                this.userDescriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class DNSDelegatedEntry
    {
        
        private System.Nullable<long> idField;
        
        private string domainField;
        
        private string viewField;
        
        private string keyNameField;
        
        private string descriptionField;
        
        private string userDescriptionField;
        
        private string[] aliasesField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<long> ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Domain
        {
            get
            {
                return this.domainField;
            }
            set
            {
                this.domainField = value;
            }
        }
        
        /// <remarks/>
        public string View
        {
            get
            {
                return this.viewField;
            }
            set
            {
                this.viewField = value;
            }
        }
        
        /// <remarks/>
        public string KeyName
        {
            get
            {
                return this.keyNameField;
            }
            set
            {
                this.keyNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string UserDescription
        {
            get
            {
                return this.userDescriptionField;
            }
            set
            {
                this.userDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] Aliases
        {
            get
            {
                return this.aliasesField;
            }
            set
            {
                this.aliasesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class DnsZoneOptions
    {
        
        private System.Nullable<bool> internalField;
        
        private System.Nullable<bool> externalField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<bool> Internal
        {
            get
            {
                return this.internalField;
            }
            set
            {
                this.internalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<bool> External
        {
            get
            {
                return this.externalField;
            }
            set
            {
                this.externalField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class VMInterfaceOptions
    {
        
        private string ipField;
        
        private string iPv6Field;
        
        private string serviceNameField;
        
        private string internetConnectivityField;
        
        private string addressTypeField;
        
        private string bindHardwareAddressField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string IP
        {
            get
            {
                return this.ipField;
            }
            set
            {
                this.ipField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string IPv6
        {
            get
            {
                return this.iPv6Field;
            }
            set
            {
                this.iPv6Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ServiceName
        {
            get
            {
                return this.serviceNameField;
            }
            set
            {
                this.serviceNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string InternetConnectivity
        {
            get
            {
                return this.internetConnectivityField;
            }
            set
            {
                this.internetConnectivityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string AddressType
        {
            get
            {
                return this.addressTypeField;
            }
            set
            {
                this.addressTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string BindHardwareAddress
        {
            get
            {
                return this.bindHardwareAddressField;
            }
            set
            {
                this.bindHardwareAddressField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class VMClusterSearch
    {
        
        private string clusterNameField;
        
        private string surnameField;
        
        private string firstNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ClusterName
        {
            get
            {
                return this.clusterNameField;
            }
            set
            {
                this.clusterNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Surname
        {
            get
            {
                return this.surnameField;
            }
            set
            {
                this.surnameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FirstName
        {
            get
            {
                return this.firstNameField;
            }
            set
            {
                this.firstNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class VMInfo
    {
        
        private string nameField;
        
        private bool isVMField;
        
        private string vMParentField;
        
        private string[] vMGuestListField;
        
        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsVM
        {
            get
            {
                return this.isVMField;
            }
            set
            {
                this.isVMField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string VMParent
        {
            get
            {
                return this.vMParentField;
            }
            set
            {
                this.vMParentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] VMGuestList
        {
            get
            {
                return this.vMGuestListField;
            }
            set
            {
                this.vMGuestListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class VMClusterInfo
    {
        
        private long idField;
        
        private string nameField;
        
        private string descriptionField;
        
        private Person responsiblePersonField;
        
        private string[] servicesField;
        
        /// <remarks/>
        public long ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Person ResponsiblePerson
        {
            get
            {
                return this.responsiblePersonField;
            }
            set
            {
                this.responsiblePersonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] Services
        {
            get
            {
                return this.servicesField;
            }
            set
            {
                this.servicesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class VMCreateOptions
    {
        
        private string vMParentField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string VMParent
        {
            get
            {
                return this.vMParentField;
            }
            set
            {
                this.vMParentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class ServiceInfo
    {
        
        private string nameField;
        
        private string primaryField;
        
        private string addressIniField;
        
        private string addressEndField;
        
        private int addressCountField;
        
        private string subnetMaskField;
        
        private string defaultGatewayField;
        
        private string[] nameServersField;
        
        private string[] timeServersField;
        
        private string[] mediumsField;
        
        private string networkDomainField;
        
        private string descriptionField;
        
        private int userIPTotalField;
        
        private int userIPFreeField;
        
        private string iPv6NetworkField;
        
        private int iPv6NetMaskField;
        
        private string iPv6DefaultGatewayField;
        
        private string[] iPv6NameServersField;
        
        private string[] iPv6TimeServersField;
        
        private string[] secondariesField;
        
        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Primary
        {
            get
            {
                return this.primaryField;
            }
            set
            {
                this.primaryField = value;
            }
        }
        
        /// <remarks/>
        public string AddressIni
        {
            get
            {
                return this.addressIniField;
            }
            set
            {
                this.addressIniField = value;
            }
        }
        
        /// <remarks/>
        public string AddressEnd
        {
            get
            {
                return this.addressEndField;
            }
            set
            {
                this.addressEndField = value;
            }
        }
        
        /// <remarks/>
        public int AddressCount
        {
            get
            {
                return this.addressCountField;
            }
            set
            {
                this.addressCountField = value;
            }
        }
        
        /// <remarks/>
        public string SubnetMask
        {
            get
            {
                return this.subnetMaskField;
            }
            set
            {
                this.subnetMaskField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string DefaultGateway
        {
            get
            {
                return this.defaultGatewayField;
            }
            set
            {
                this.defaultGatewayField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] NameServers
        {
            get
            {
                return this.nameServersField;
            }
            set
            {
                this.nameServersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] TimeServers
        {
            get
            {
                return this.timeServersField;
            }
            set
            {
                this.timeServersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] Mediums
        {
            get
            {
                return this.mediumsField;
            }
            set
            {
                this.mediumsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string NetworkDomain
        {
            get
            {
                return this.networkDomainField;
            }
            set
            {
                this.networkDomainField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public int UserIPTotal
        {
            get
            {
                return this.userIPTotalField;
            }
            set
            {
                this.userIPTotalField = value;
            }
        }
        
        /// <remarks/>
        public int UserIPFree
        {
            get
            {
                return this.userIPFreeField;
            }
            set
            {
                this.userIPFreeField = value;
            }
        }
        
        /// <remarks/>
        public string IPv6Network
        {
            get
            {
                return this.iPv6NetworkField;
            }
            set
            {
                this.iPv6NetworkField = value;
            }
        }
        
        /// <remarks/>
        public int IPv6NetMask
        {
            get
            {
                return this.iPv6NetMaskField;
            }
            set
            {
                this.iPv6NetMaskField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string IPv6DefaultGateway
        {
            get
            {
                return this.iPv6DefaultGatewayField;
            }
            set
            {
                this.iPv6DefaultGatewayField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] IPv6NameServers
        {
            get
            {
                return this.iPv6NameServersField;
            }
            set
            {
                this.iPv6NameServersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] IPv6TimeServers
        {
            get
            {
                return this.iPv6TimeServersField;
            }
            set
            {
                this.iPv6TimeServersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] Secondaries
        {
            get
            {
                return this.secondariesField;
            }
            set
            {
                this.secondariesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class LogicalInterfaceInput
    {
        
        private string interfaceNameField;
        
        private string serviceNameField;
        
        private string securityClassField;
        
        private string ipField;
        
        private string iPv6Field;
        
        private System.Nullable<bool> internetConnectivityField;
        
        /// <remarks/>
        public string InterfaceName
        {
            get
            {
                return this.interfaceNameField;
            }
            set
            {
                this.interfaceNameField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceName
        {
            get
            {
                return this.serviceNameField;
            }
            set
            {
                this.serviceNameField = value;
            }
        }
        
        /// <remarks/>
        public string SecurityClass
        {
            get
            {
                return this.securityClassField;
            }
            set
            {
                this.securityClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string IP
        {
            get
            {
                return this.ipField;
            }
            set
            {
                this.ipField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string IPv6
        {
            get
            {
                return this.iPv6Field;
            }
            set
            {
                this.iPv6Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<bool> InternetConnectivity
        {
            get
            {
                return this.internetConnectivityField;
            }
            set
            {
                this.internetConnectivityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class NetNameTuple
    {
        
        private string deviceNameField;
        
        private string interfaceNameField;
        
        private string ipField;
        
        private string iPv6Field;
        
        private string aliasField;
        
        /// <remarks/>
        public string DeviceName
        {
            get
            {
                return this.deviceNameField;
            }
            set
            {
                this.deviceNameField = value;
            }
        }
        
        /// <remarks/>
        public string InterfaceName
        {
            get
            {
                return this.interfaceNameField;
            }
            set
            {
                this.interfaceNameField = value;
            }
        }
        
        /// <remarks/>
        public string IP
        {
            get
            {
                return this.ipField;
            }
            set
            {
                this.ipField = value;
            }
        }
        
        /// <remarks/>
        public string IPv6
        {
            get
            {
                return this.iPv6Field;
            }
            set
            {
                this.iPv6Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Alias
        {
            get
            {
                return this.aliasField;
            }
            set
            {
                this.aliasField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class SwitchPortTypeStatus
    {
        
        private string typeField;
        
        private string statusField;
        
        /// <remarks/>
        public string Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string Status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class SetInput
    {
        
        private string nameField;
        
        private string domainField;
        
        private PersonInput responsiblePersonField;
        
        private string descriptionField;
        
        private string projectUrlField;
        
        private string typeField;
        
        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Domain
        {
            get
            {
                return this.domainField;
            }
            set
            {
                this.domainField = value;
            }
        }
        
        /// <remarks/>
        public PersonInput ResponsiblePerson
        {
            get
            {
                return this.responsiblePersonField;
            }
            set
            {
                this.responsiblePersonField = value;
            }
        }
        
        /// <remarks/>
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ProjectUrl
        {
            get
            {
                return this.projectUrlField;
            }
            set
            {
                this.projectUrlField = value;
            }
        }
        
        /// <remarks/>
        public string Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class PersonInput
    {
        
        private string nameField;
        
        private string firstNameField;
        
        private string departmentField;
        
        private string groupField;
        
        private System.Nullable<long> personIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FirstName
        {
            get
            {
                return this.firstNameField;
            }
            set
            {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Department
        {
            get
            {
                return this.departmentField;
            }
            set
            {
                this.departmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Group
        {
            get
            {
                return this.groupField;
            }
            set
            {
                this.groupField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<long> PersonID
        {
            get
            {
                return this.personIDField;
            }
            set
            {
                this.personIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class ObservedSwitchConnection
    {
        
        private string switchNameField;
        
        private string switchPortField;
        
        private string hardwareAddressField;
        
        /// <remarks/>
        public string SwitchName
        {
            get
            {
                return this.switchNameField;
            }
            set
            {
                this.switchNameField = value;
            }
        }
        
        /// <remarks/>
        public string SwitchPort
        {
            get
            {
                return this.switchPortField;
            }
            set
            {
                this.switchPortField = value;
            }
        }
        
        /// <remarks/>
        public string HardwareAddress
        {
            get
            {
                return this.hardwareAddressField;
            }
            set
            {
                this.hardwareAddressField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class OutletLocation
    {
        
        private Location locationField;
        
        private Outlet outletField;
        
        /// <remarks/>
        public Location Location
        {
            get
            {
                return this.locationField;
            }
            set
            {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        public Outlet Outlet
        {
            get
            {
                return this.outletField;
            }
            set
            {
                this.outletField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class Location
    {
        
        private string buildingField;
        
        private string floorField;
        
        private string roomField;
        
        /// <remarks/>
        public string Building
        {
            get
            {
                return this.buildingField;
            }
            set
            {
                this.buildingField = value;
            }
        }
        
        /// <remarks/>
        public string Floor
        {
            get
            {
                return this.floorField;
            }
            set
            {
                this.floorField = value;
            }
        }
        
        /// <remarks/>
        public string Room
        {
            get
            {
                return this.roomField;
            }
            set
            {
                this.roomField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class Outlet
    {
        
        private string idField;
        
        private bool fANOUTField;
        
        /// <remarks/>
        public string ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public bool FANOUT
        {
            get
            {
                return this.fANOUTField;
            }
            set
            {
                this.fANOUTField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class Connection
    {
        
        private string interfaceNameField;
        
        private string switchNameField;
        
        private string switchPortField;
        
        /// <remarks/>
        public string InterfaceName
        {
            get
            {
                return this.interfaceNameField;
            }
            set
            {
                this.interfaceNameField = value;
            }
        }
        
        /// <remarks/>
        public string SwitchName
        {
            get
            {
                return this.switchNameField;
            }
            set
            {
                this.switchNameField = value;
            }
        }
        
        /// <remarks/>
        public string SwitchPort
        {
            get
            {
                return this.switchPortField;
            }
            set
            {
                this.switchPortField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class SwitchPort
    {
        
        private string nameField;
        
        private string serviceNameField;
        
        private string mediumField;
        
        private string typeField;
        
        private string statusField;
        
        private bool inUseField;
        
        private string[] devicesField;
        
        private string[] terminalsField;
        
        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceName
        {
            get
            {
                return this.serviceNameField;
            }
            set
            {
                this.serviceNameField = value;
            }
        }
        
        /// <remarks/>
        public string Medium
        {
            get
            {
                return this.mediumField;
            }
            set
            {
                this.mediumField = value;
            }
        }
        
        /// <remarks/>
        public string Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string Status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public bool InUse
        {
            get
            {
                return this.inUseField;
            }
            set
            {
                this.inUseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] Devices
        {
            get
            {
                return this.devicesField;
            }
            set
            {
                this.devicesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] Terminals
        {
            get
            {
                return this.terminalsField;
            }
            set
            {
                this.terminalsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class InetInfo
    {
        
        private string hostNameField;
        
        private string hardwareAddressField;
        
        private string ipField;
        
        private string netAddressField;
        
        private string maskField;
        
        private string gatewayAddressField;
        
        /// <remarks/>
        public string HostName
        {
            get
            {
                return this.hostNameField;
            }
            set
            {
                this.hostNameField = value;
            }
        }
        
        /// <remarks/>
        public string HardwareAddress
        {
            get
            {
                return this.hardwareAddressField;
            }
            set
            {
                this.hardwareAddressField = value;
            }
        }
        
        /// <remarks/>
        public string IP
        {
            get
            {
                return this.ipField;
            }
            set
            {
                this.ipField = value;
            }
        }
        
        /// <remarks/>
        public string NetAddress
        {
            get
            {
                return this.netAddressField;
            }
            set
            {
                this.netAddressField = value;
            }
        }
        
        /// <remarks/>
        public string Mask
        {
            get
            {
                return this.maskField;
            }
            set
            {
                this.maskField = value;
            }
        }
        
        /// <remarks/>
        public string GatewayAddress
        {
            get
            {
                return this.gatewayAddressField;
            }
            set
            {
                this.gatewayAddressField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class SetInfo
    {
        
        private long idField;
        
        private string nameField;
        
        private string domainField;
        
        private Person responsiblePersonField;
        
        private string descriptionField;
        
        private string projectUrlField;
        
        private string typeField;
        
        private string[] addressesField;
        
        private string[] servicesField;
        
        private string[] setsField;
        
        /// <remarks/>
        public long ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Domain
        {
            get
            {
                return this.domainField;
            }
            set
            {
                this.domainField = value;
            }
        }
        
        /// <remarks/>
        public Person ResponsiblePerson
        {
            get
            {
                return this.responsiblePersonField;
            }
            set
            {
                this.responsiblePersonField = value;
            }
        }
        
        /// <remarks/>
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ProjectUrl
        {
            get
            {
                return this.projectUrlField;
            }
            set
            {
                this.projectUrlField = value;
            }
        }
        
        /// <remarks/>
        public string Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] Addresses
        {
            get
            {
                return this.addressesField;
            }
            set
            {
                this.addressesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] Services
        {
            get
            {
                return this.servicesField;
            }
            set
            {
                this.servicesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] Sets
        {
            get
            {
                return this.setsField;
            }
            set
            {
                this.setsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class BOOTPInfo
    {
        
        private string serverField;
        
        private string imagePathField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Server
        {
            get
            {
                return this.serverField;
            }
            set
            {
                this.serverField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ImagePath
        {
            get
            {
                return this.imagePathField;
            }
            set
            {
                this.imagePathField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class BulkMoveOptions
    {
        
        private bool preserveIPField;
        
        /// <remarks/>
        public bool PreserveIP
        {
            get
            {
                return this.preserveIPField;
            }
            set
            {
                this.preserveIPField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class BulkInterfaceAuto
    {
        
        private string interfaceNameField;
        
        private string[] iPAliasesField;
        
        private Location locationField;
        
        private string outletLabelField;
        
        private string securityClassField;
        
        private bool internetConnectivityField;
        
        private string mediumField;
        
        private string switchNameField;
        
        private string portNumberField;
        
        private string cableNumberField;
        
        private string ipField;
        
        private string iPv6Field;
        
        private string serviceNameField;
        
        private string bindHardwareAddressField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string InterfaceName
        {
            get
            {
                return this.interfaceNameField;
            }
            set
            {
                this.interfaceNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] IPAliases
        {
            get
            {
                return this.iPAliasesField;
            }
            set
            {
                this.iPAliasesField = value;
            }
        }
        
        /// <remarks/>
        public Location Location
        {
            get
            {
                return this.locationField;
            }
            set
            {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        public string OutletLabel
        {
            get
            {
                return this.outletLabelField;
            }
            set
            {
                this.outletLabelField = value;
            }
        }
        
        /// <remarks/>
        public string SecurityClass
        {
            get
            {
                return this.securityClassField;
            }
            set
            {
                this.securityClassField = value;
            }
        }
        
        /// <remarks/>
        public bool InternetConnectivity
        {
            get
            {
                return this.internetConnectivityField;
            }
            set
            {
                this.internetConnectivityField = value;
            }
        }
        
        /// <remarks/>
        public string Medium
        {
            get
            {
                return this.mediumField;
            }
            set
            {
                this.mediumField = value;
            }
        }
        
        /// <remarks/>
        public string SwitchName
        {
            get
            {
                return this.switchNameField;
            }
            set
            {
                this.switchNameField = value;
            }
        }
        
        /// <remarks/>
        public string PortNumber
        {
            get
            {
                return this.portNumberField;
            }
            set
            {
                this.portNumberField = value;
            }
        }
        
        /// <remarks/>
        public string CableNumber
        {
            get
            {
                return this.cableNumberField;
            }
            set
            {
                this.cableNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string IP
        {
            get
            {
                return this.ipField;
            }
            set
            {
                this.ipField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string IPv6
        {
            get
            {
                return this.iPv6Field;
            }
            set
            {
                this.iPv6Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ServiceName
        {
            get
            {
                return this.serviceNameField;
            }
            set
            {
                this.serviceNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string BindHardwareAddress
        {
            get
            {
                return this.bindHardwareAddressField;
            }
            set
            {
                this.bindHardwareAddressField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class BulkInterface
    {
        
        private string interfaceNameField;
        
        private string[] iPAliasesField;
        
        private Location locationField;
        
        private string outletLabelField;
        
        private string securityClassField;
        
        private bool internetConnectivityField;
        
        private string mediumField;
        
        private string switchNameField;
        
        private string portNumberField;
        
        private string cableNumberField;
        
        private string ipField;
        
        private string iPv6Field;
        
        private string serviceNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string InterfaceName
        {
            get
            {
                return this.interfaceNameField;
            }
            set
            {
                this.interfaceNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] IPAliases
        {
            get
            {
                return this.iPAliasesField;
            }
            set
            {
                this.iPAliasesField = value;
            }
        }
        
        /// <remarks/>
        public Location Location
        {
            get
            {
                return this.locationField;
            }
            set
            {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        public string OutletLabel
        {
            get
            {
                return this.outletLabelField;
            }
            set
            {
                this.outletLabelField = value;
            }
        }
        
        /// <remarks/>
        public string SecurityClass
        {
            get
            {
                return this.securityClassField;
            }
            set
            {
                this.securityClassField = value;
            }
        }
        
        /// <remarks/>
        public bool InternetConnectivity
        {
            get
            {
                return this.internetConnectivityField;
            }
            set
            {
                this.internetConnectivityField = value;
            }
        }
        
        /// <remarks/>
        public string Medium
        {
            get
            {
                return this.mediumField;
            }
            set
            {
                this.mediumField = value;
            }
        }
        
        /// <remarks/>
        public string SwitchName
        {
            get
            {
                return this.switchNameField;
            }
            set
            {
                this.switchNameField = value;
            }
        }
        
        /// <remarks/>
        public string PortNumber
        {
            get
            {
                return this.portNumberField;
            }
            set
            {
                this.portNumberField = value;
            }
        }
        
        /// <remarks/>
        public string CableNumber
        {
            get
            {
                return this.cableNumberField;
            }
            set
            {
                this.cableNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string IP
        {
            get
            {
                return this.ipField;
            }
            set
            {
                this.ipField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string IPv6
        {
            get
            {
                return this.iPv6Field;
            }
            set
            {
                this.iPv6Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ServiceName
        {
            get
            {
                return this.serviceNameField;
            }
            set
            {
                this.serviceNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class DeviceInput
    {
        
        private string deviceNameField;
        
        private Location locationField;
        
        private string zoneField;
        
        private string manufacturerField;
        
        private string modelField;
        
        private string descriptionField;
        
        private string tagField;
        
        private string serialNumberField;
        
        private OperatingSystem operatingSystemField;
        
        private string inventoryNumberField;
        
        private PersonInput landbManagerPersonField;
        
        private PersonInput responsiblePersonField;
        
        private PersonInput userPersonField;
        
        private System.Nullable<bool> hCPResponseField;
        
        private System.Nullable<bool> iPv6ReadyField;
        
        private System.Nullable<bool> managerLockedField;
        
        /// <remarks/>
        public string DeviceName
        {
            get
            {
                return this.deviceNameField;
            }
            set
            {
                this.deviceNameField = value;
            }
        }
        
        /// <remarks/>
        public Location Location
        {
            get
            {
                return this.locationField;
            }
            set
            {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Zone
        {
            get
            {
                return this.zoneField;
            }
            set
            {
                this.zoneField = value;
            }
        }
        
        /// <remarks/>
        public string Manufacturer
        {
            get
            {
                return this.manufacturerField;
            }
            set
            {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        public string Model
        {
            get
            {
                return this.modelField;
            }
            set
            {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Tag
        {
            get
            {
                return this.tagField;
            }
            set
            {
                this.tagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SerialNumber
        {
            get
            {
                return this.serialNumberField;
            }
            set
            {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        public OperatingSystem OperatingSystem
        {
            get
            {
                return this.operatingSystemField;
            }
            set
            {
                this.operatingSystemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string InventoryNumber
        {
            get
            {
                return this.inventoryNumberField;
            }
            set
            {
                this.inventoryNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public PersonInput LandbManagerPerson
        {
            get
            {
                return this.landbManagerPersonField;
            }
            set
            {
                this.landbManagerPersonField = value;
            }
        }
        
        /// <remarks/>
        public PersonInput ResponsiblePerson
        {
            get
            {
                return this.responsiblePersonField;
            }
            set
            {
                this.responsiblePersonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public PersonInput UserPerson
        {
            get
            {
                return this.userPersonField;
            }
            set
            {
                this.userPersonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<bool> HCPResponse
        {
            get
            {
                return this.hCPResponseField;
            }
            set
            {
                this.hCPResponseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<bool> IPv6Ready
        {
            get
            {
                return this.iPv6ReadyField;
            }
            set
            {
                this.iPv6ReadyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<bool> ManagerLocked
        {
            get
            {
                return this.managerLockedField;
            }
            set
            {
                this.managerLockedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class OperatingSystem
    {
        
        private string nameField;
        
        private string versionField;
        
        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Version
        {
            get
            {
                return this.versionField;
            }
            set
            {
                this.versionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class Blocking
    {
        
        private Person byField;
        
        private Time dateField;
        
        private string reasonField;
        
        private string unblockRoleField;
        
        /// <remarks/>
        public Person By
        {
            get
            {
                return this.byField;
            }
            set
            {
                this.byField = value;
            }
        }
        
        /// <remarks/>
        public Time Date
        {
            get
            {
                return this.dateField;
            }
            set
            {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public string Reason
        {
            get
            {
                return this.reasonField;
            }
            set
            {
                this.reasonField = value;
            }
        }
        
        /// <remarks/>
        public string UnblockRole
        {
            get
            {
                return this.unblockRoleField;
            }
            set
            {
                this.unblockRoleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class Time
    {
        
        private System.Nullable<System.DateTime> timeUTCField;
        
        private System.Nullable<long> unixtimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> TimeUTC
        {
            get
            {
                return this.timeUTCField;
            }
            set
            {
                this.timeUTCField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<long> unixtime
        {
            get
            {
                return this.unixtimeField;
            }
            set
            {
                this.unixtimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class ReverseTelnet
    {
        
        private string dataField;
        
        private string portField;
        
        private string serviceNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Data
        {
            get
            {
                return this.dataField;
            }
            set
            {
                this.dataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Port
        {
            get
            {
                return this.portField;
            }
            set
            {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ServiceName
        {
            get
            {
                return this.serviceNameField;
            }
            set
            {
                this.serviceNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class InterfaceInformation
    {
        
        private System.Nullable<bool> connectedToSCField;
        
        private string nameField;
        
        private string iPAddressField;
        
        private string serviceNameField;
        
        private string securityClassField;
        
        private bool internetConnectivityField;
        
        private string subnetMaskField;
        
        private string defaultGatewayField;
        
        private string[] nameServersField;
        
        private string[] belongsToSetsField;
        
        private string[] timeServersField;
        
        private string iPv6AddressField;
        
        private int iPv6NetMaskField;
        
        private string[] iPv6NameServersField;
        
        private string[] iPv6TimeServersField;
        
        private string iPv6DefaultGatewayField;
        
        private string[] iPAliasesField;
        
        private InterfaceCard boundInterfaceCardField;
        
        private Outlet outletField;
        
        private string rackNameField;
        
        private string descriptionField;
        
        private string networkDomainNameField;
        
        private string mediumField;
        
        private ReverseTelnet reverseTelnetField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<bool> ConnectedToSC
        {
            get
            {
                return this.connectedToSCField;
            }
            set
            {
                this.connectedToSCField = value;
            }
        }
        
        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string IPAddress
        {
            get
            {
                return this.iPAddressField;
            }
            set
            {
                this.iPAddressField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceName
        {
            get
            {
                return this.serviceNameField;
            }
            set
            {
                this.serviceNameField = value;
            }
        }
        
        /// <remarks/>
        public string SecurityClass
        {
            get
            {
                return this.securityClassField;
            }
            set
            {
                this.securityClassField = value;
            }
        }
        
        /// <remarks/>
        public bool InternetConnectivity
        {
            get
            {
                return this.internetConnectivityField;
            }
            set
            {
                this.internetConnectivityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SubnetMask
        {
            get
            {
                return this.subnetMaskField;
            }
            set
            {
                this.subnetMaskField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string DefaultGateway
        {
            get
            {
                return this.defaultGatewayField;
            }
            set
            {
                this.defaultGatewayField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] NameServers
        {
            get
            {
                return this.nameServersField;
            }
            set
            {
                this.nameServersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] BelongsToSets
        {
            get
            {
                return this.belongsToSetsField;
            }
            set
            {
                this.belongsToSetsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] TimeServers
        {
            get
            {
                return this.timeServersField;
            }
            set
            {
                this.timeServersField = value;
            }
        }
        
        /// <remarks/>
        public string IPv6Address
        {
            get
            {
                return this.iPv6AddressField;
            }
            set
            {
                this.iPv6AddressField = value;
            }
        }
        
        /// <remarks/>
        public int IPv6NetMask
        {
            get
            {
                return this.iPv6NetMaskField;
            }
            set
            {
                this.iPv6NetMaskField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] IPv6NameServers
        {
            get
            {
                return this.iPv6NameServersField;
            }
            set
            {
                this.iPv6NameServersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] IPv6TimeServers
        {
            get
            {
                return this.iPv6TimeServersField;
            }
            set
            {
                this.iPv6TimeServersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string IPv6DefaultGateway
        {
            get
            {
                return this.iPv6DefaultGatewayField;
            }
            set
            {
                this.iPv6DefaultGatewayField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] IPAliases
        {
            get
            {
                return this.iPAliasesField;
            }
            set
            {
                this.iPAliasesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public InterfaceCard BoundInterfaceCard
        {
            get
            {
                return this.boundInterfaceCardField;
            }
            set
            {
                this.boundInterfaceCardField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Outlet Outlet
        {
            get
            {
                return this.outletField;
            }
            set
            {
                this.outletField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string RackName
        {
            get
            {
                return this.rackNameField;
            }
            set
            {
                this.rackNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string NetworkDomainName
        {
            get
            {
                return this.networkDomainNameField;
            }
            set
            {
                this.networkDomainNameField = value;
            }
        }
        
        /// <remarks/>
        public string Medium
        {
            get
            {
                return this.mediumField;
            }
            set
            {
                this.mediumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public ReverseTelnet ReverseTelnet
        {
            get
            {
                return this.reverseTelnetField;
            }
            set
            {
                this.reverseTelnetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class InterfaceCard
    {
        
        private string hardwareAddressField;
        
        private string cardTypeField;
        
        /// <remarks/>
        public string HardwareAddress
        {
            get
            {
                return this.hardwareAddressField;
            }
            set
            {
                this.hardwareAddressField = value;
            }
        }
        
        /// <remarks/>
        public string CardType
        {
            get
            {
                return this.cardTypeField;
            }
            set
            {
                this.cardTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class DeviceInfo
    {
        
        private string deviceNameField;
        
        private Location locationField;
        
        private string zoneField;
        
        private string statusField;
        
        private string manufacturerField;
        
        private string modelField;
        
        private string genericTypeField;
        
        private string descriptionField;
        
        private string tagField;
        
        private string serialNumberField;
        
        private OperatingSystem operatingSystemField;
        
        private string inventoryNumberField;
        
        private Time startDateField;
        
        private Time endDateField;
        
        private Person landbManagerPersonField;
        
        private Person responsiblePersonField;
        
        private Person userPersonField;
        
        private InterfaceCard[] networkInterfaceCardsField;
        
        private InterfaceInformation[] interfacesField;
        
        private bool hCPResponseField;
        
        private Blocking blockedField;
        
        private Time lastChangeDateField;
        
        private System.Nullable<bool> iPv6ReadyField;
        
        private System.Nullable<bool> managerLockedField;
        
        /// <remarks/>
        public string DeviceName
        {
            get
            {
                return this.deviceNameField;
            }
            set
            {
                this.deviceNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Location Location
        {
            get
            {
                return this.locationField;
            }
            set
            {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Zone
        {
            get
            {
                return this.zoneField;
            }
            set
            {
                this.zoneField = value;
            }
        }
        
        /// <remarks/>
        public string Status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string Manufacturer
        {
            get
            {
                return this.manufacturerField;
            }
            set
            {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        public string Model
        {
            get
            {
                return this.modelField;
            }
            set
            {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        public string GenericType
        {
            get
            {
                return this.genericTypeField;
            }
            set
            {
                this.genericTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Tag
        {
            get
            {
                return this.tagField;
            }
            set
            {
                this.tagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SerialNumber
        {
            get
            {
                return this.serialNumberField;
            }
            set
            {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        public OperatingSystem OperatingSystem
        {
            get
            {
                return this.operatingSystemField;
            }
            set
            {
                this.operatingSystemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string InventoryNumber
        {
            get
            {
                return this.inventoryNumberField;
            }
            set
            {
                this.inventoryNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Time StartDate
        {
            get
            {
                return this.startDateField;
            }
            set
            {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Time EndDate
        {
            get
            {
                return this.endDateField;
            }
            set
            {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Person LandbManagerPerson
        {
            get
            {
                return this.landbManagerPersonField;
            }
            set
            {
                this.landbManagerPersonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Person ResponsiblePerson
        {
            get
            {
                return this.responsiblePersonField;
            }
            set
            {
                this.responsiblePersonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Person UserPerson
        {
            get
            {
                return this.userPersonField;
            }
            set
            {
                this.userPersonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public InterfaceCard[] NetworkInterfaceCards
        {
            get
            {
                return this.networkInterfaceCardsField;
            }
            set
            {
                this.networkInterfaceCardsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public InterfaceInformation[] Interfaces
        {
            get
            {
                return this.interfacesField;
            }
            set
            {
                this.interfacesField = value;
            }
        }
        
        /// <remarks/>
        public bool HCPResponse
        {
            get
            {
                return this.hCPResponseField;
            }
            set
            {
                this.hCPResponseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Blocking Blocked
        {
            get
            {
                return this.blockedField;
            }
            set
            {
                this.blockedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Time LastChangeDate
        {
            get
            {
                return this.lastChangeDateField;
            }
            set
            {
                this.lastChangeDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<bool> IPv6Ready
        {
            get
            {
                return this.iPv6ReadyField;
            }
            set
            {
                this.iPv6ReadyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<bool> ManagerLocked
        {
            get
            {
                return this.managerLockedField;
            }
            set
            {
                this.managerLockedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class DeviceBasicInfo
    {
        
        private string deviceNameField;
        
        private Location locationField;
        
        private string zoneField;
        
        private string statusField;
        
        private string manufacturerField;
        
        private string modelField;
        
        private string genericTypeField;
        
        private string descriptionField;
        
        private string tagField;
        
        private string serialNumberField;
        
        private OperatingSystem operatingSystemField;
        
        private string inventoryNumberField;
        
        private Time startDateField;
        
        private Time endDateField;
        
        private Person landbManagerPersonField;
        
        private Person responsiblePersonField;
        
        private Person userPersonField;
        
        private bool hCPResponseField;
        
        private Time lastChangeDateField;
        
        private System.Nullable<bool> iPv6ReadyField;
        
        private System.Nullable<bool> managerLockedField;
        
        /// <remarks/>
        public string DeviceName
        {
            get
            {
                return this.deviceNameField;
            }
            set
            {
                this.deviceNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Location Location
        {
            get
            {
                return this.locationField;
            }
            set
            {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Zone
        {
            get
            {
                return this.zoneField;
            }
            set
            {
                this.zoneField = value;
            }
        }
        
        /// <remarks/>
        public string Status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string Manufacturer
        {
            get
            {
                return this.manufacturerField;
            }
            set
            {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        public string Model
        {
            get
            {
                return this.modelField;
            }
            set
            {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        public string GenericType
        {
            get
            {
                return this.genericTypeField;
            }
            set
            {
                this.genericTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Tag
        {
            get
            {
                return this.tagField;
            }
            set
            {
                this.tagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SerialNumber
        {
            get
            {
                return this.serialNumberField;
            }
            set
            {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        public OperatingSystem OperatingSystem
        {
            get
            {
                return this.operatingSystemField;
            }
            set
            {
                this.operatingSystemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string InventoryNumber
        {
            get
            {
                return this.inventoryNumberField;
            }
            set
            {
                this.inventoryNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Time StartDate
        {
            get
            {
                return this.startDateField;
            }
            set
            {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Time EndDate
        {
            get
            {
                return this.endDateField;
            }
            set
            {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Person LandbManagerPerson
        {
            get
            {
                return this.landbManagerPersonField;
            }
            set
            {
                this.landbManagerPersonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Person ResponsiblePerson
        {
            get
            {
                return this.responsiblePersonField;
            }
            set
            {
                this.responsiblePersonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Person UserPerson
        {
            get
            {
                return this.userPersonField;
            }
            set
            {
                this.userPersonField = value;
            }
        }
        
        /// <remarks/>
        public bool HCPResponse
        {
            get
            {
                return this.hCPResponseField;
            }
            set
            {
                this.hCPResponseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Time LastChangeDate
        {
            get
            {
                return this.lastChangeDateField;
            }
            set
            {
                this.lastChangeDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<bool> IPv6Ready
        {
            get
            {
                return this.iPv6ReadyField;
            }
            set
            {
                this.iPv6ReadyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<bool> ManagerLocked
        {
            get
            {
                return this.managerLockedField;
            }
            set
            {
                this.managerLockedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:NetworkDataTypes")]
    public partial class DeviceSearch
    {
        
        private string nameField;
        
        private string surnameField;
        
        private string firstNameField;
        
        private Location locationField;
        
        private string outletIDField;
        
        private string tagField;
        
        private string serialNumberField;
        
        private string inventoryNumberField;
        
        private string hardwareAddressField;
        
        private string iPAddressField;
        
        private string rackNameField;
        
        private System.Nullable<long> personIDField;
        
        private string domainField;
        
        private string responsibleDepGroupField;
        
        private string userResponsibleDepGroupField;
        
        private string operatingSystemField;
        
        private System.Nullable<System.DateTime> lastChangeDateField;
        
        private System.Nullable<System.DateTime> lastActiveDateField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Surname
        {
            get
            {
                return this.surnameField;
            }
            set
            {
                this.surnameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string FirstName
        {
            get
            {
                return this.firstNameField;
            }
            set
            {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public Location Location
        {
            get
            {
                return this.locationField;
            }
            set
            {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OutletID
        {
            get
            {
                return this.outletIDField;
            }
            set
            {
                this.outletIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Tag
        {
            get
            {
                return this.tagField;
            }
            set
            {
                this.tagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string SerialNumber
        {
            get
            {
                return this.serialNumberField;
            }
            set
            {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string InventoryNumber
        {
            get
            {
                return this.inventoryNumberField;
            }
            set
            {
                this.inventoryNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string HardwareAddress
        {
            get
            {
                return this.hardwareAddressField;
            }
            set
            {
                this.hardwareAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string IPAddress
        {
            get
            {
                return this.iPAddressField;
            }
            set
            {
                this.iPAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string RackName
        {
            get
            {
                return this.rackNameField;
            }
            set
            {
                this.rackNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<long> PersonID
        {
            get
            {
                return this.personIDField;
            }
            set
            {
                this.personIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string Domain
        {
            get
            {
                return this.domainField;
            }
            set
            {
                this.domainField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ResponsibleDepGroup
        {
            get
            {
                return this.responsibleDepGroupField;
            }
            set
            {
                this.responsibleDepGroupField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string UserResponsibleDepGroup
        {
            get
            {
                return this.userResponsibleDepGroupField;
            }
            set
            {
                this.userResponsibleDepGroupField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string OperatingSystem
        {
            get
            {
                return this.operatingSystemField;
            }
            set
            {
                this.operatingSystemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> LastChangeDate
        {
            get
            {
                return this.lastChangeDateField;
            }
            set
            {
                this.lastChangeDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> LastActiveDate
        {
            get
            {
                return this.lastActiveDateField;
            }
            set
            {
                this.lastActiveDateField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface NetworkServiceInterfaceChannel : ch.cern.network.NetworkServiceInterface, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class NetworkServiceInterfaceClient : System.ServiceModel.ClientBase<ch.cern.network.NetworkServiceInterface>, ch.cern.network.NetworkServiceInterface
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public NetworkServiceInterfaceClient() : 
                base(NetworkServiceInterfaceClient.GetDefaultBinding(), NetworkServiceInterfaceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetworkServicePort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NetworkServiceInterfaceClient(EndpointConfiguration endpointConfiguration) : 
                base(NetworkServiceInterfaceClient.GetBindingForEndpoint(endpointConfiguration), NetworkServiceInterfaceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NetworkServiceInterfaceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(NetworkServiceInterfaceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NetworkServiceInterfaceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(NetworkServiceInterfaceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NetworkServiceInterfaceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> getAuthTokenAsync(string Login, string Password, string Type)
        {
            return base.Channel.getAuthTokenAsync(Login, Password, Type);
        }
        
        public System.Threading.Tasks.Task<string[]> searchDeviceAsync(ch.cern.network.DeviceSearch DeviceSearch)
        {
            return base.Channel.searchDeviceAsync(DeviceSearch);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.DeviceBasicInfo> getDeviceBasicInfoAsync(string DeviceName)
        {
            return base.Channel.getDeviceBasicInfoAsync(DeviceName);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.DeviceInfo> getDeviceInfoAsync(string DeviceName)
        {
            return base.Channel.getDeviceInfoAsync(DeviceName);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.DeviceInfo[]> getDeviceInfoArrayAsync(string[] DeviceNameList)
        {
            return base.Channel.getDeviceInfoArrayAsync(DeviceNameList);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.DeviceInfo> getDeviceInfoFromNameMACAsync(string DeviceName, string MAC)
        {
            return base.Channel.getDeviceInfoFromNameMACAsync(DeviceName, MAC);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.DeviceInfo> getMyDeviceInfoAsync()
        {
            return base.Channel.getMyDeviceInfoAsync();
        }
        
        public System.Threading.Tasks.Task<string[]> getLastChangedDevicesAsync(int Minutes)
        {
            return base.Channel.getLastChangedDevicesAsync(Minutes);
        }
        
        public System.Threading.Tasks.Task<bool> bulkInsertAsync(ch.cern.network.DeviceInput Device, ch.cern.network.InterfaceCard[] Cards, ch.cern.network.BulkInterface[] Interfaces)
        {
            return base.Channel.bulkInsertAsync(Device, Cards, Interfaces);
        }
        
        public System.Threading.Tasks.Task<bool> bulkInsertAutoAsync(ch.cern.network.DeviceInput Device, ch.cern.network.InterfaceCard[] Cards, ch.cern.network.BulkInterfaceAuto[] Interfaces)
        {
            return base.Channel.bulkInsertAutoAsync(Device, Cards, Interfaces);
        }
        
        public System.Threading.Tasks.Task<bool> bulkRemoveAsync(string DeviceName)
        {
            return base.Channel.bulkRemoveAsync(DeviceName);
        }
        
        public System.Threading.Tasks.Task<bool> deviceInsertAsync(ch.cern.network.DeviceInput Device)
        {
            return base.Channel.deviceInsertAsync(Device);
        }
        
        public System.Threading.Tasks.Task<bool> deviceAddCardAsync(string DeviceName, ch.cern.network.InterfaceCard InterfaceCard)
        {
            return base.Channel.deviceAddCardAsync(DeviceName, InterfaceCard);
        }
        
        public System.Threading.Tasks.Task<bool> deviceAddBulkInterfaceAsync(string DeviceName, ch.cern.network.BulkInterface BulkInterface)
        {
            return base.Channel.deviceAddBulkInterfaceAsync(DeviceName, BulkInterface);
        }
        
        public System.Threading.Tasks.Task<bool> deviceRemoveAsync(string DeviceName)
        {
            return base.Channel.deviceRemoveAsync(DeviceName);
        }
        
        public System.Threading.Tasks.Task<bool> deviceRemoveCardAsync(string DeviceName, string HardwareAddress)
        {
            return base.Channel.deviceRemoveCardAsync(DeviceName, HardwareAddress);
        }
        
        public System.Threading.Tasks.Task<bool> deviceRemoveBulkInterfaceAsync(string DeviceName, string InterfaceName)
        {
            return base.Channel.deviceRemoveBulkInterfaceAsync(DeviceName, InterfaceName);
        }
        
        public System.Threading.Tasks.Task<bool> deviceMoveBulkInterfaceAsync(string DeviceName, string InterfaceName, ch.cern.network.BulkInterface BulkInterface, ch.cern.network.BulkMoveOptions BulkMoveOptions)
        {
            return base.Channel.deviceMoveBulkInterfaceAsync(DeviceName, InterfaceName, BulkInterface, BulkMoveOptions);
        }
        
        public System.Threading.Tasks.Task<bool> deviceUpdateAsync(string DeviceName, ch.cern.network.DeviceInput DeviceInput)
        {
            return base.Channel.deviceUpdateAsync(DeviceName, DeviceInput);
        }
        
        public System.Threading.Tasks.Task<bool> deviceGlobalRenameAsync(string DeviceName, string NewDeviceName)
        {
            return base.Channel.deviceGlobalRenameAsync(DeviceName, NewDeviceName);
        }
        
        public System.Threading.Tasks.Task<bool> setHCPResponseAsync(string[] DeviceList, bool HCPFlag)
        {
            return base.Channel.setHCPResponseAsync(DeviceList, HCPFlag);
        }
        
        public System.Threading.Tasks.Task<bool> deviceUpdateIPv6ReadyAsync(string DeviceName, bool IPv6Ready)
        {
            return base.Channel.deviceUpdateIPv6ReadyAsync(DeviceName, IPv6Ready);
        }
        
        public System.Threading.Tasks.Task<bool> deviceUpdateManagerLockAsync(string DeviceName, bool ManagerLocked)
        {
            return base.Channel.deviceUpdateManagerLockAsync(DeviceName, ManagerLocked);
        }
        
        public System.Threading.Tasks.Task<bool> deviceSetBOOTPInfoAsync(string Device, string Server, string ImagePath)
        {
            return base.Channel.deviceSetBOOTPInfoAsync(Device, Server, ImagePath);
        }
        
        public System.Threading.Tasks.Task<bool> deviceRemoveBOOTPInfoAsync(string Device)
        {
            return base.Channel.deviceRemoveBOOTPInfoAsync(Device);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.BOOTPInfo> getBOOTPInfoAsync(string Device)
        {
            return base.Channel.getBOOTPInfoAsync(Device);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.BulkInterface> getBulkInterfaceInfoAsync(string InterfaceName)
        {
            return base.Channel.getBulkInterfaceInfoAsync(InterfaceName);
        }
        
        public System.Threading.Tasks.Task<bool> setInsertAddressAsync(string Set, string Address)
        {
            return base.Channel.setInsertAddressAsync(Set, Address);
        }
        
        public System.Threading.Tasks.Task<bool> setInsertServiceAsync(string Set, string Service)
        {
            return base.Channel.setInsertServiceAsync(Set, Service);
        }
        
        public System.Threading.Tasks.Task<bool> setDeleteAddressAsync(string Set, string Address)
        {
            return base.Channel.setDeleteAddressAsync(Set, Address);
        }
        
        public System.Threading.Tasks.Task<bool> setDeleteServiceAsync(string Set, string Service)
        {
            return base.Channel.setDeleteServiceAsync(Set, Service);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.SetInfo> getSetInfoAsync(string SetName)
        {
            return base.Channel.getSetInfoAsync(SetName);
        }
        
        public System.Threading.Tasks.Task<string> getSetNameFromIDAsync(long SetID)
        {
            return base.Channel.getSetNameFromIDAsync(SetID);
        }
        
        public System.Threading.Tasks.Task<string[]> getSetAllInterfacesAsync(string SetName)
        {
            return base.Channel.getSetAllInterfacesAsync(SetName);
        }
        
        public System.Threading.Tasks.Task<string[]> getSetInterfacesTrustingAsync(string SetName)
        {
            return base.Channel.getSetInterfacesTrustingAsync(SetName);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.InetInfo[]> getHCPInfoArrayAsync(string[] Hosts)
        {
            return base.Channel.getHCPInfoArrayAsync(Hosts);
        }
        
        public System.Threading.Tasks.Task<string[]> getDevicesFromServiceAsync(string Service)
        {
            return base.Channel.getDevicesFromServiceAsync(Service);
        }
        
        public System.Threading.Tasks.Task<string[]> getSwitchesFromServiceAsync(string Service)
        {
            return base.Channel.getSwitchesFromServiceAsync(Service);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.SwitchPort[]> getSwitchInfoAsync(string SwitchName)
        {
            return base.Channel.getSwitchInfoAsync(SwitchName);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.Connection[]> getConnectionsFromDeviceAsync(string DeviceName)
        {
            return base.Channel.getConnectionsFromDeviceAsync(DeviceName);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.OutletLocation> getOutletLocationFromSwitchPortAsync(string SwitchName, string PortName)
        {
            return base.Channel.getOutletLocationFromSwitchPortAsync(SwitchName, PortName);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.ObservedSwitchConnection[]> getCurrentConnectionAsync(string ip, string[] HardwareAddressList)
        {
            return base.Channel.getCurrentConnectionAsync(ip, HardwareAddressList);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.ObservedSwitchConnection[]> getMyCurrentConnectionAsync(string[] HardwareAddressList)
        {
            return base.Channel.getMyCurrentConnectionAsync(HardwareAddressList);
        }
        
        public System.Threading.Tasks.Task<bool> enableFanOutFromSwitchPortAsync(string SwitchName, string PortName)
        {
            return base.Channel.enableFanOutFromSwitchPortAsync(SwitchName, PortName);
        }
        
        public System.Threading.Tasks.Task<bool> bindUnbindInterfaceAsync(string InterfaceName, string HardwareAddress)
        {
            return base.Channel.bindUnbindInterfaceAsync(InterfaceName, HardwareAddress);
        }
        
        public System.Threading.Tasks.Task<bool> interfaceAddAliasAsync(string InterfaceName, string Alias)
        {
            return base.Channel.interfaceAddAliasAsync(InterfaceName, Alias);
        }
        
        public System.Threading.Tasks.Task<bool> interfaceRemoveAliasAsync(string InterfaceName, string Alias)
        {
            return base.Channel.interfaceRemoveAliasAsync(InterfaceName, Alias);
        }
        
        public System.Threading.Tasks.Task<bool> interfaceMoveAliasAsync(string InterfaceName, string Alias, string NewInterfaceName)
        {
            return base.Channel.interfaceMoveAliasAsync(InterfaceName, Alias, NewInterfaceName);
        }
        
        public System.Threading.Tasks.Task<bool> interfaceRenameAsync(string InterfaceName, string NewInterfaceName)
        {
            return base.Channel.interfaceRenameAsync(InterfaceName, NewInterfaceName);
        }
        
        public System.Threading.Tasks.Task<bool> interfaceMoveAsync(string InterfaceName, string NewDeviceName)
        {
            return base.Channel.interfaceMoveAsync(InterfaceName, NewDeviceName);
        }
        
        public System.Threading.Tasks.Task<string[]> searchSetAsync(string SetPattern)
        {
            return base.Channel.searchSetAsync(SetPattern);
        }
        
        public System.Threading.Tasks.Task<bool> setInsertAsync(ch.cern.network.SetInput Set)
        {
            return base.Channel.setInsertAsync(Set);
        }
        
        public System.Threading.Tasks.Task<bool> setRemoveAsync(string SetName)
        {
            return base.Channel.setRemoveAsync(SetName);
        }
        
        public System.Threading.Tasks.Task<bool> setSwitchPortTypeStatusAsync(string SwitchName, string PortName, ch.cern.network.SwitchPortTypeStatus SwitchPortTypeStatus)
        {
            return base.Channel.setSwitchPortTypeStatusAsync(SwitchName, PortName, SwitchPortTypeStatus);
        }
        
        public System.Threading.Tasks.Task<bool> setSwitchPortMediumAsync(string SwitchName, string PortName, string PortMedium)
        {
            return base.Channel.setSwitchPortMediumAsync(SwitchName, PortName, PortMedium);
        }
        
        public System.Threading.Tasks.Task<bool> setSwitchPortServiceAsync(string SwitchName, string PortName, string Service)
        {
            return base.Channel.setSwitchPortServiceAsync(SwitchName, PortName, Service);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.SwitchPortTypeStatus> getSwitchPortTypeStatusAsync(string SwitchName, string PortName)
        {
            return base.Channel.getSwitchPortTypeStatusAsync(SwitchName, PortName);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.NetNameTuple[]> searchNetNameTableAsync(string NetName)
        {
            return base.Channel.searchNetNameTableAsync(NetName);
        }
        
        public System.Threading.Tasks.Task<bool> deviceAddLogicalInterfaceAsync(string DeviceName, ch.cern.network.LogicalInterfaceInput LogicalInterface)
        {
            return base.Channel.deviceAddLogicalInterfaceAsync(DeviceName, LogicalInterface);
        }
        
        public System.Threading.Tasks.Task<bool> deviceRemoveLogicalInterfaceAsync(string DeviceName, string InterfaceName)
        {
            return base.Channel.deviceRemoveLogicalInterfaceAsync(DeviceName, InterfaceName);
        }
        
        public System.Threading.Tasks.Task<bool> interfaceUpdateDescriptionAsync(string InterfaceName, string Description)
        {
            return base.Channel.interfaceUpdateDescriptionAsync(InterfaceName, Description);
        }
        
        public System.Threading.Tasks.Task<bool> serviceUpdateDescriptionAsync(string ServiceName, string Description)
        {
            return base.Channel.serviceUpdateDescriptionAsync(ServiceName, Description);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.ServiceInfo> getServiceInfoAsync(string ServiceName)
        {
            return base.Channel.getServiceInfoAsync(ServiceName);
        }
        
        public System.Threading.Tasks.Task<bool> vmCreateAsync(ch.cern.network.DeviceInput VMDevice, ch.cern.network.VMCreateOptions VMCreateOptions)
        {
            return base.Channel.vmCreateAsync(VMDevice, VMCreateOptions);
        }
        
        public System.Threading.Tasks.Task<bool> vmMigrateAsync(string VMName, string NewParent)
        {
            return base.Channel.vmMigrateAsync(VMName, NewParent);
        }
        
        public System.Threading.Tasks.Task<bool> vmUpdateAsync(string DeviceName, ch.cern.network.DeviceInput DeviceInput)
        {
            return base.Channel.vmUpdateAsync(DeviceName, DeviceInput);
        }
        
        public System.Threading.Tasks.Task<bool> vmDestroyAsync(string VMName)
        {
            return base.Channel.vmDestroyAsync(VMName);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.VMClusterInfo> vmClusterGetInfoAsync(string VMClusterName)
        {
            return base.Channel.vmClusterGetInfoAsync(VMClusterName);
        }
        
        public System.Threading.Tasks.Task<string[]> vmClusterGetDevicesAsync(string VMClusterName)
        {
            return base.Channel.vmClusterGetDevicesAsync(VMClusterName);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.VMInfo> vmGetInfoAsync(string VMName)
        {
            return base.Channel.vmGetInfoAsync(VMName);
        }
        
        public System.Threading.Tasks.Task<string[]> vmGetClusterMembershipAsync(string DeviceName)
        {
            return base.Channel.vmGetClusterMembershipAsync(DeviceName);
        }
        
        public System.Threading.Tasks.Task<string[]> vmSearchClusterAsync(ch.cern.network.VMClusterSearch VMClusterSearch)
        {
            return base.Channel.vmSearchClusterAsync(VMClusterSearch);
        }
        
        public System.Threading.Tasks.Task<bool> vmAddInterfaceAsync(string VMName, string InterfaceName, string VMClusterName, ch.cern.network.VMInterfaceOptions VMInterfaceOptions)
        {
            return base.Channel.vmAddInterfaceAsync(VMName, InterfaceName, VMClusterName, VMInterfaceOptions);
        }
        
        public System.Threading.Tasks.Task<bool> vmRemoveInterfaceAsync(string VMName, string InterfaceName)
        {
            return base.Channel.vmRemoveInterfaceAsync(VMName, InterfaceName);
        }
        
        public System.Threading.Tasks.Task<bool> vmMoveInterfaceAsync(string VMName, string InterfaceName, string VMClusterName, ch.cern.network.VMInterfaceOptions VMInterfaceOptions)
        {
            return base.Channel.vmMoveInterfaceAsync(VMName, InterfaceName, VMClusterName, VMInterfaceOptions);
        }
        
        public System.Threading.Tasks.Task<string> vmAddCardAsync(string VMName, ch.cern.network.InterfaceCard InterfaceCard)
        {
            return base.Channel.vmAddCardAsync(VMName, InterfaceCard);
        }
        
        public System.Threading.Tasks.Task<bool> vmRemoveCardAsync(string VMName, string HardwareAddress)
        {
            return base.Channel.vmRemoveCardAsync(VMName, HardwareAddress);
        }
        
        public System.Threading.Tasks.Task<bool> dnsZoneUpdateAsync(string Zone, ch.cern.network.DnsZoneOptions DnsZoneOptions)
        {
            return base.Channel.dnsZoneUpdateAsync(Zone, DnsZoneOptions);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.DNSDelegatedEntry[]> dnsDelegatedSearchAsync(string Search)
        {
            return base.Channel.dnsDelegatedSearchAsync(Search);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.DNSDelegatedEntry> dnsDelegatedGetByNameViewAsync(string Domain, string View)
        {
            return base.Channel.dnsDelegatedGetByNameViewAsync(Domain, View);
        }
        
        public System.Threading.Tasks.Task<bool> dnsDelegatedAddAsync(ch.cern.network.DNSDelegatedInput DNSDelegatedInput)
        {
            return base.Channel.dnsDelegatedAddAsync(DNSDelegatedInput);
        }
        
        public System.Threading.Tasks.Task<ch.cern.network.DNSDelegatedKey[]> dnsDelegatedListKeysAsync(ch.cern.network.Auth Auth)
        {
            return base.Channel.dnsDelegatedListKeysAsync(Auth);
        }
        
        public System.Threading.Tasks.Task<bool> dnsDelegatedRemoveAsync(string Domain, string View)
        {
            return base.Channel.dnsDelegatedRemoveAsync(Domain, View);
        }
        
        public System.Threading.Tasks.Task<bool> dnsDelegatedAliasAddAsync(string Domain, string View, string Alias)
        {
            return base.Channel.dnsDelegatedAliasAddAsync(Domain, View, Alias);
        }
        
        public System.Threading.Tasks.Task<bool> dnsDelegatedAliasRemoveAsync(string Domain, string View, string Alias)
        {
            return base.Channel.dnsDelegatedAliasRemoveAsync(Domain, View, Alias);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetworkServicePort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetworkServicePort))
            {
                return new System.ServiceModel.EndpointAddress("https://network.cern.ch/sc/soap/soap.fcgi?v=6");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return NetworkServiceInterfaceClient.GetBindingForEndpoint(EndpointConfiguration.NetworkServicePort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return NetworkServiceInterfaceClient.GetEndpointAddress(EndpointConfiguration.NetworkServicePort);
        }
        
        public enum EndpointConfiguration
        {
            
            NetworkServicePort,
        }
    }
}
